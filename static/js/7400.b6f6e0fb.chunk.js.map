{"version":3,"file":"static/js/7400.b6f6e0fb.chunk.js","mappings":"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","sources":["components/Tooltip/Tooltip.jsx","components/Tooltip/sliceText.js","components/Tooltip/style/StyledTooltipBox.jsx","components/Tooltip/style/StyledTooltipCard.jsx","components/Tooltip/style/StyledTooltipText.jsx","components/Tooltip/tooltipHandler.js","components/Typography/Typography.jsx","hooks/useWindowDimension.js"],"sourcesContent":["import { Typography } from 'components/Typography';\r\nimport { StyledTooltipBox } from './style/StyledTooltipBox';\r\nimport { StyledTooltipText } from './style/StyledTooltipText';\r\nimport { StyledTooltipCard } from './style/StyledTooltipCard';\r\nimport { Box } from 'components/Box';\r\nimport { useWindowDimension } from 'hooks/useWindowDimension';\r\nimport { tooltipHandler } from './tooltipHandler';\r\n\r\nexport const Tooltip = ({ children, sx, itemName }) => {\r\n    const { width } = useWindowDimension();\r\n\r\n    return (\r\n        <Box as={'li'} {...sx}>\r\n            <StyledTooltipCard>\r\n                <StyledTooltipText>\r\n                    {tooltipHandler(itemName, Box, Typography, children, width)}\r\n                </StyledTooltipText>\r\n                <StyledTooltipBox>\r\n                    <Typography variant={'body'} color={'white'}>\r\n                        {children}\r\n                    </Typography>\r\n                </StyledTooltipBox>\r\n            </StyledTooltipCard>\r\n        </Box>\r\n    );\r\n};\r\n","const sliceTextByWidth = (width) => {\r\n    if (width >= 360 && width < 768) {\r\n        return 32;\r\n    } else if (width >= 768 && width < 1024) {\r\n        return 38;\r\n    } else if (width >= 1024 && width < 1170) {\r\n        return 26;\r\n    } else {\r\n        return 42;\r\n    }\r\n};\r\n\r\nexport const sliceText = (text, width) => {\r\n    if (typeof text === 'string') {\r\n        const coma = text.length > sliceTextByWidth(width) ? '...' : '';\r\n\r\n        return `${text.slice(0, sliceTextByWidth(width))}${coma}`;\r\n    }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledTooltipBox = styled('div')`\r\n    display: inline-block;\r\n    position: absolute;\r\n    bottom: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, 150%);\r\n\r\n    @media screen and (min-width: ${(p) => p.theme.breakpoints.mobile}) {\r\n        max-width: 328px;\r\n        word-wrap: break-word;\r\n    }\r\n\r\n    @media screen and (min-width: ${(p) => p.theme.breakpoints.tablet}) {\r\n        max-width: 344px;\r\n    }\r\n\r\n    @media screen and (min-width: ${(p) => p.theme.breakpoints.laptop}) {\r\n        max-width: 282px;\r\n    }\r\n\r\n    @media screen and (min-width: ${(p) => p.theme.breakpoints.desktopS}) {\r\n        max-width: initial;\r\n        white-space: nowrap;\r\n        word-wrap: initial;\r\n    }\r\n\r\n    padding: 3px 16px;\r\n    border-radius: 4px;\r\n    background-color: ${(p) => p.theme.colors.black};\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    transition: opacity, 0.3s ease-in-out;\r\n\r\n    z-index: 1;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\nimport { StyledTooltipText } from './StyledTooltipText';\r\nimport { StyledTooltipBox } from './StyledTooltipBox';\r\n\r\nexport const StyledTooltipCard = styled('div')`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    & ${StyledTooltipText}:hover + ${StyledTooltipBox} {\r\n        opacity: 1;\r\n    }\r\n\r\n    ${({ sx }) => {\r\n        return css`\r\n        margin\r\n        \r\n        `;\r\n    }}\r\n`;\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledTooltipText = styled('div')``\r\n","import { sliceText } from './sliceText';\r\n\r\nexport const tooltipHandler = (itemName, Box, Typography, children, width) => {\r\n    if (itemName === 'email') {\r\n        return (\r\n            <Box as={'a'} href={`mailto:${children}`}>\r\n                <Typography variant={'body'}>\r\n                    {sliceText(children, width)}\r\n                </Typography>\r\n            </Box>\r\n        );\r\n    } else {\r\n        return (\r\n            <Typography variant={'body'}>\r\n                {sliceText(children, width)}\r\n            </Typography>\r\n        );\r\n    }\r\n};\r\n","import styled from 'styled-components'\r\nimport { variant } from 'styled-system'\r\nimport { composeUtility } from 'style'\r\n\r\nexport const Typography = styled('div')(\r\n    variant({\r\n        variants: {\r\n            heading: {\r\n                fontWeight: 'regular',\r\n                fontSize: 3,\r\n                lineHeight: 3,\r\n            },\r\n            body: {\r\n                fontWeight: 'regular',\r\n                fontSize: 2,\r\n                lineHeight: 2,\r\n            },\r\n            helperText: {\r\n                fontWeight: 'regular',\r\n                fontSize: 1,\r\n                lineHeight: 1,\r\n            },\r\n        },\r\n    }),\r\n    ({ sx }) => {\r\n        return { ...sx }\r\n    },\r\n    composeUtility()\r\n)\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst getWindowDimension = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n\r\n    return { width, height };\r\n};\r\n\r\nexport const useWindowDimension = () => {\r\n    const [dimension, setDimension] = useState(getWindowDimension());\r\n\r\n    useEffect(() => {\r\n        const setWindowDimension = () => setDimension(getWindowDimension());\r\n\r\n        window.addEventListener('resize', setWindowDimension);\r\n\r\n        return () => window.removeEventListener('resize', setWindowDimension);\r\n    }, []);\r\n\r\n    return dimension;\r\n};\r\n"],"names":["Tooltip","_ref","children","sx","itemName","width","useWindowDimension","_jsx","Box","_objectSpread","as","_jsxs","StyledTooltipCard","StyledTooltipText","tooltipHandler","Typography","StyledTooltipBox","variant","color","sliceTextByWidth","sliceText","text","coma","length","concat","slice","styled","_templateObject","_taggedTemplateLiteral","p","theme","breakpoints","mobile","tablet","laptop","desktopS","colors","black","css","_templateObject2","href","variants","heading","fontWeight","fontSize","lineHeight","body","helperText","composeUtility","getWindowDimension","_window","window","innerWidth","height","innerHeight","_useState","useState","_useState2","_slicedToArray","dimension","setDimension","useEffect","setWindowDimension","addEventListener","removeEventListener"],"sourceRoot":""}